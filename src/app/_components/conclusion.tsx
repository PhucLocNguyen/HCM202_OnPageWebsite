/* eslint-disable */

"use client";
import { useState, useEffect, useRef } from "react";
import Image from "next/image";
import {
  ProgressSlider,
  SliderBtnGroup,
  SliderBtn,
  SliderContent,
  SliderWrapper,
} from "@/components/ui/progress-slider";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Home } from "lucide-react";
import { LampContainer } from "@/components/ui/lamp";
import { motion } from "framer-motion";

const items = [
  {
    icon: <Home />,
    title: "üí∞ Kinh t·∫ø",
    desc: 'Gi·∫£i ph√≥ng tri·ªát ƒë·ªÉ l·ª±c l∆∞·ª£ng s·∫£n xu·∫•t, ph√°t tri·ªÉn s·∫£n xu·∫•t hi·ªán ƒë·∫°i tr√™n c∆° s·ªü c√¥ng h·ªØu v·ªÅ t∆∞ li·ªáu s·∫£n xu·∫•t, t·∫°o ti·ªÅn ƒë·ªÅ v·∫≠t ch·∫•t ‚Äì k·ªπ thu·∫≠t d·ªìi d√†o cho m·ªôt x√£ h·ªôi m·ªõi kh√¥ng c√≥ ƒë√≥i ngh√®o v√† thi·∫øu th·ªën.',
    sliderName: "Kinh t·∫ø",
    src: "/assets/image/economy.jpg",
  },
  {
    icon: <Home />,
    title: "‚öñÔ∏è Ch√≠nh tr·ªã ‚Äì X√£ h·ªôi",
    desc: "L√£nh ƒë·∫°o c√°ch m·∫°ng l·∫≠t ƒë·ªï √°ch th·ªëng tr·ªã c·ªßa giai c·∫•p t∆∞ s·∫£n, gi√†nh ch√≠nh quy·ªÅn v·ªÅ tay nh√¢n d√¢n lao ƒë·ªông, thi·∫øt l·∫≠p nh√† n∆∞·ªõc ki·ªÉu m·ªõi (chuy√™n ch√≠nh v√¥ s·∫£n) ƒë·ªÉ th·ª±c hi·ªán d√¢n ch·ªß, c√¥ng b·∫±ng v√† ti·∫øn b·ªô x√£ h·ªôi, x√¢y d·ª±ng n·ªÅn d√¢n ch·ªß r·ªông r√£i cho ƒë·∫°i ƒëa s·ªë.",
    sliderName: "Ch√≠nh tr·ªã ‚Äì X√£ h·ªôi",
    src: "/assets/image/politic.jpg",
  },
  {
    icon: <Home />,
    title: "üìö VƒÉn h√≥a ‚Äì T∆∞ t∆∞·ªüng",
    desc: "X√¢y d·ª±ng h·ªá gi√° tr·ªã m·ªõi (lao ƒë·ªông, c√¥ng b·∫±ng, d√¢n ch·ªß, b√¨nh ƒë·∫≥ng, t·ª± do) d·ª±a tr√™n n·ªÅn t·∫£ng ch·ªß nghƒ©a M√°c ‚Äì L√™nin, x√≥a b·ªè c√°c t√†n d∆∞ t∆∞ t∆∞·ªüng l·∫°c h·∫≠u, ph·∫£n ƒë·ªông, x√°c l·∫≠p √Ω th·ª©c h·ªá khoa h·ªçc v√† c√°ch m·∫°ng.",
    sliderName: "VƒÉn h√≥a ‚Äì T∆∞ t∆∞·ªüng",
    src: "/assets/image/culture.jpg",
  },
];

export default function ConclusionSection() {
  const isMobile = useMediaQuery("(min-width: 640px)");
  const [isVisible, setIsVisible] = useState(false);
  const [activeSlider, setActiveSlider] = useState(items[0].sliderName);
  const sectionRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          setIsVisible(true);
          setActiveSlider(items[0].sliderName);
        } else {
          setIsVisible(false);
        }
      },
      { threshold: 0.5 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
    };
  }, []);

  return (
    <>
      <div className="h-[75vh]">
        <LampContainer>
          <motion.h1
            initial={{ opacity: 0.5, y: 100 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{
              delay: 0.3,
              duration: 0.8,
              ease: "easeInOut",
            }}
            className="mt-8 bg-gradient-to-br from-slate-300 to-slate-500 py-4 bg-clip-text text-center text-2xl sm:text-3xl md:text-4xl lg:text-7xl font-medium tracking-tight text-transparent"
          >
            S·ª© m·ªánh l·ªãch s·ª≠ <br/> c·ªßa giai c·∫•p c√¥ng nh√¢n
          </motion.h1>
          <div className="max-w-7xl mx-auto pt-10 px-4 md:px-8 lg:px-10 mb-16">
            <p className="text-neutral-700 dark:text-neutral-300 text-sm md:text-2xl pt-10">
              S·ª© m·ªánh l·ªãch s·ª≠ l√† tr√°ch nhi·ªám m√† l·ªãch s·ª≠ giao ph√≥ cho giai c·∫•p c√¥ng nh√¢n. ƒê√≥ l√† tr·ªü th√†nh l·ª±c l∆∞·ª£ng ti√™n phong, th√¥ng qua ch√≠nh ƒë·∫£ng ti√™n phong (ƒê·∫£ng C·ªông s·∫£n) t·ªï ch·ª©c v√† l√£nh ƒë·∫°o nh√¢n d√¢n lao ƒë·ªông ƒë·ªÉ x√≥a b·ªè ch·∫ø ƒë·ªô ng∆∞·ªùi b√≥c l·ªôt ng∆∞·ªùi, gi·∫£i ph√≥ng to√†n nh√¢n lo·∫°i kh·ªèi m·ªçi √°p b·ª©c, b√≥c l·ªôt v√† x√¢y d·ª±ng th√†nh c√¥ng x√£ h·ªôi c·ªông s·∫£n ch·ªß nghƒ©a.
            </p>
          </div>
        </LampContainer>
      </div>
      <div
        ref={sectionRef}
        className="w-full h-full md:lg:pt-10 lg:pt-10 pt-14 bg-slate-950 overflow-hidden pb-10"
      >        
        <div>
          <ProgressSlider
            vertical={isMobile}
            fastDuration={300}
            duration={4000}
            activeSlider={activeSlider}
            className="flex flex-col md:flex-row h-full"
          >
            {/* Content Section */}          
            <SliderBtnGroup className="relative w-full md:w-1/2 z-10 flex flex-col h-[75vh] md:h-full bg-slate-950/95 backdrop-blur-md overflow-y-auto">
              {items.map((item, index) => (
                <SliderBtn
                  key={index}
                  value={item?.sliderName}
                  className="text-left p-4 md:p-6 border-b border-slate-800 flex-none h-[25%] md:h-1/4 relative group hover:bg-slate-900/50 transition-colors"
                  progressBarClass="left-0 top-0 bg-white w-1 md:w-2 h-full before:h-full before:w-2 md:before:w-3 before:bg-white"
                >
                  {/* Dark overlay for text contrast */}
                  <div className="absolute inset-0 bg-gradient-to-r from-slate-950/90 to-slate-950/50 pointer-events-none" />

                  <div className="relative z-10">
                    <h2 className="inline-block px-3 py-1.5 md:px-4 md:py-2 rounded bg-white text-black mb-3 md:mb-4 text-sm md:text-xl font-bold">
                      {item.title}
                    </h2>
                    <p className="text-sm md:text-base text-slate-200 line-clamp-3 md:line-clamp-none">
                      {item.desc}
                    </p>
                  </div>
                </SliderBtn>
              ))}
            </SliderBtnGroup>

            {/* Image Section */}
            <SliderContent className="hidden  w-full md:w-3/6 lg:flex md:flex flex-col h-[40vh] md:h-full">
              {items.map((item, index) => (
                <SliderWrapper
                  className="h-full w-full"
                  key={index}
                  value={item?.sliderName}
                >
                  <Image
                    className="h-full w-full object-cover rounded-lg pe-10"
                    src={item?.src || "/placeholder.svg"}
                    width={16}
                    height={9}
                    alt={item.sliderName}
                    priority={index === 0}
                    sizes="(max-width: 768px) 100vw, 50vw"
                  />
                </SliderWrapper>
              ))}
            </SliderContent>
          </ProgressSlider>
        </div>
        

        {/* Mobile Navigation Indicator */}
        <div className="hidden md:hidden fixed bottom-4 left-1/2 -translate-x-1/2  gap-2 z-20">
          {items.map((item, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full transition-colors ${
                activeSlider === item.sliderName ? "bg-white" : "bg-white/30"
              }`}
            />
          ))}
        </div>
      </div>
    </>
  );
}
