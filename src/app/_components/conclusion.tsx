/* eslint-disable */

"use client";
import { useState, useEffect, useRef } from "react";
import Image from "next/image";
import {
  ProgressSlider,
  SliderBtnGroup,
  SliderBtn,
  SliderContent,
  SliderWrapper,
} from "@/components/ui/progress-slider";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Home } from "lucide-react";

const items = [
  {
    icon: <Home />,
    title: "üé® Con ng∆∞·ªùi l√† ch·ªß th·ªÉ s√°ng t·∫°o",
    desc: 'Con ng∆∞·ªùi kh√¥ng ch·ªâ l√† ƒë·ªëi t∆∞·ª£ng ti·∫øp thu, m√† l√† ch·ªß th·ªÉ t·∫°o ra gi√° tr·ªã. Vi·ªác "tr·ªìng ng∆∞·ªùi" l√† s·ª± ƒë·∫ßu t∆∞ v√†o tr√≠ tu·ªá, ph·∫©m ch·∫•t v√† nƒÉng l·ª±c ƒë·ªÉ gi√∫p h·ªç c√≥ th·ªÉ ƒë√≥ng g√≥p cho s·ª± ph√°t tri·ªÉn x√£ h·ªôi l√¢u d√†i.',
    sliderName: "Con ng∆∞·ªùi l√† ch·ªß th·ªÉ s√°ng t·∫°o",
    src: "/assets/image/conclusion1.jpg",
  },
  {
    icon: <Home />,
    title: "üöÄ Vai tr√≤ quy·∫øt ƒë·ªãnh c·ªßa con ng∆∞·ªùi ƒë·ªëi v·ªõi s·ª± ph√°t tri·ªÉn x√£ h·ªôi",
    desc: "Con ng∆∞·ªùi l√† ƒë·ªông l·ª±c ch√≠nh trong c√°c ti·∫øn b·ªô v·ªÅ khoa h·ªçc, c√¥ng ngh·ªá v√† vƒÉn h√≥a. M·ªôt x√£ h·ªôi th·ªãnh v∆∞·ª£ng kh√¥ng th·ªÉ thi·∫øu con ng∆∞·ªùi ƒë∆∞·ª£c ph√°t tri·ªÉn ƒë·∫ßy ƒë·ªß v·ªÅ nƒÉng l·ª±c v√† ƒë·∫°o ƒë·ª©c.",
    sliderName: "Vai tr√≤ quy·∫øt ƒë·ªãnh c·ªßa con ng∆∞·ªùi ƒë·ªëi v·ªõi s·ª± ph√°t tri·ªÉn x√£ h·ªôi",
    src: "/assets/image/conclusion2.jpg",
  },
  {
    icon: <Home />,
    title: "üå± Ph√°t tri·ªÉn con ng∆∞·ªùi trong th·ªùi ƒë·∫°i m·ªõi",
    desc: "ƒê·∫ßu t∆∞ gi√°o d·ª•c, khuy·∫øn kh√≠ch s√°ng t·∫°o, v√† x√¢y d·ª±ng m√¥i tr∆∞·ªùng l√†nh m·∫°nh l√† n·ªÅn t·∫£ng gi√∫p con ng∆∞·ªùi ph√°t tri·ªÉn to√†n di·ªán, th√∫c ƒë·∫©y x√£ h·ªôi b·ªÅn v·ªØng.",
    sliderName: "Ph√°t tri·ªÉn con ng∆∞·ªùi trong th·ªùi ƒë·∫°i m·ªõi",
    src: "/assets/image/conclusion3.jpg",
  },
  {
    icon: <Home />,
    title: "üåç Con ng∆∞·ªùi v√† s·ª± ph√°t tri·ªÉn b·ªÅn v·ªØng",
    sliderName: "Con ng∆∞·ªùi v√† s·ª± ph√°t tri·ªÉn b·ªÅn v·ªØng",
    desc: "Con ng∆∞·ªùi l√† y·∫øu t·ªë quy·∫øt ƒë·ªãnh trong vi·ªác b·∫£o v·ªá m√¥i tr∆∞·ªùng v√† th√∫c ƒë·∫©y c√¥ng b·∫±ng x√£ h·ªôi, g√≥p ph·∫ßn x√¢y d·ª±ng m·ªôt th·∫ø gi·ªõi c√¥ng b·∫±ng v√† b·ªÅn v·ªØng.",
    src: "/assets/image/conclusion5.jpg",
  },
  // {
  //   icon: <Home />,
  //   title: "üîë T·ªïng k·∫øt",
  //   sliderName: "T·ªïng k·∫øt",
  //   desc: 'T√≥m l·∫°i, "tr·ªìng ng∆∞·ªùi" kh√¥ng ch·ªâ mang l·∫°i l·ª£i √≠ch ngay l·∫≠p t·ª©c m√† c√≤n t·∫°o d·ª±ng n·ªÅn t·∫£ng cho s·ª± th·ªãnh v∆∞·ª£ng l√¢u d√†i, g√≥p ph·∫ßn x√¢y d·ª±ng m·ªôt x√£ h·ªôi v·ªØng m·∫°nh v√† b·ªÅn v·ªØng trong t∆∞∆°ng lai.',
  //   src: "/assets/image/conclusion4.jpg",
  // },
];

export default function ConclusionSection() {
  const isMobile = useMediaQuery("(min-width: 640px)");
  const [isVisible, setIsVisible] = useState(false);
  const [activeSlider, setActiveSlider] = useState(items[0].sliderName);
  const sectionRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          setIsVisible(true);
          setActiveSlider(items[0].sliderName);
        } else {
          setIsVisible(false);
        }
      },
      { threshold: 0.5 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
    };
  }, []);

  return (
    <>
      <div className="text-white min-h-screen w-full bg-slate-950 grid place-content-center relative px-4 py-8 md:py-12">
        <div className="absolute bottom-0 left-0 right-0 top-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:54px_54px] [mask-image:radial-gradient(ellipse_60%_50%_at_50%_0%,#000_70%,transparent_100%)]" />

        <div className="max-w-4xl mx-auto space-y-8">
          <h1 className="text-3xl sm:text-4xl lg:text-5xl 2xl:text-7xl font-semibold text-center tracking-tight leading-[120%] text-green-500">
            &quot;V√¨ l·ª£i √≠ch m∆∞·ªùi nƒÉm tr·ªìng c√¢y, v√¨ l·ª£i √≠ch trƒÉm nƒÉm tr·ªìng
            ng∆∞·ªùi&quot;
          </h1>
          <h2 className="text-3xl sm:text-4xl lg:text-5xl 2xl:text-7xl font-semibold text-center tracking-tight leading-[120%]">
            D∆∞·ªõi ƒë√¢y l√† quan ƒëi·ªÉm c·ªßa nh√≥m! üëá
          </h2>
        </div>
      </div>
      <div
        ref={sectionRef}
        className="w-full h-full md:lg:pt-10 lg:pt-10 pt-14 bg-slate-950 overflow-hidden"
      >
        <ProgressSlider
          vertical={isMobile}
          fastDuration={300}
          duration={4000}
          activeSlider={activeSlider}
          className="flex flex-col md:flex-row h-full"
        >
          {/* Content Section */}
          <SliderBtnGroup className="relative w-full md:w-1/2 z-10 flex flex-col h-[75vh] md:h-full bg-slate-950/95 backdrop-blur-md overflow-y-auto">
            {items.map((item, index) => (
              <SliderBtn
                key={index}
                value={item?.sliderName}
                className="text-left p-4 md:p-6 border-b border-slate-800 flex-none h-[25%] md:h-1/4 relative group hover:bg-slate-900/50 transition-colors"
                progressBarClass="left-0 top-0 bg-white w-1 md:w-2 h-full before:h-full before:w-2 md:before:w-3 before:bg-white"
              >
                {/* Dark overlay for text contrast */}
                <div className="absolute inset-0 bg-gradient-to-r from-slate-950/90 to-slate-950/50 pointer-events-none" />

                <div className="relative z-10">
                  <h2 className="inline-block px-3 py-1.5 md:px-4 md:py-2 rounded bg-white text-black mb-3 md:mb-4 text-sm md:text-xl font-bold">
                    {item.title}
                  </h2>
                  <p className="text-sm md:text-base text-slate-200 line-clamp-3 md:line-clamp-none">
                    {item.desc}
                  </p>
                </div>
              </SliderBtn>
            ))}
          </SliderBtnGroup>

          {/* Image Section */}
          <SliderContent className="hidden  w-full md:w-3/6 lg:flex md:flex flex-col h-[40vh] md:h-full">
            {items.map((item, index) => (
              <SliderWrapper
                className="h-full w-full"
                key={index}
                value={item?.sliderName}
              >
                <Image
                  className="h-full w-full object-cover"
                  src={item?.src || "/placeholder.svg"}
                  width={1900}
                  height={1080}
                  alt={item.sliderName}
                  priority={index === 0}
                  sizes="(max-width: 768px) 100vw, 50vw"
                />
              </SliderWrapper>
            ))}
          </SliderContent>
        </ProgressSlider>

        {/* Mobile Navigation Indicator */}
        <div className="hidden md:hidden fixed bottom-4 left-1/2 -translate-x-1/2  gap-2 z-20">
          {items.map((item, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full transition-colors ${
                activeSlider === item.sliderName ? "bg-white" : "bg-white/30"
              }`}
            />
          ))}
        </div>
      </div>
    </>
  );
}
