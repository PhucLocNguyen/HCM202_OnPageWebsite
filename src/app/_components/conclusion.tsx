/* eslint-disable */

"use client";
import { useState, useEffect, useRef } from "react";
import Image from "next/image";
import {
  ProgressSlider,
  SliderBtnGroup,
  SliderBtn,
  SliderContent,
  SliderWrapper,
} from "@/components/ui/progress-slider";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Home } from "lucide-react";
import { LampContainer } from "@/components/ui/lamp";
import { motion } from "framer-motion";

const items = [
  {
    icon: <Home />,
    title: "üåü Phong th√°i v√† tr√≠ tu·ªá",
    desc: "Nguy·ªÖn √Åi Qu·ªëc l√† ng∆∞·ªùi tr√≠ tu·ªá, l·ªãch thi·ªáp, ƒëi·ªÅm ƒë·∫°m, c√≥ phong th√°i c·ªßa m·ªôt nh√† vƒÉn h√≥a l·ªõn; c√≥ b·∫£n lƒ©nh ki√™n c∆∞·ªùng, ·ª©ng x·ª≠ tinh t·∫ø, gi·∫£n d·ªã m√† nh√¢n vƒÉn, t·∫°o ·∫•n t∆∞·ª£ng s√¢u s·∫Øc v·ªõi m·ªçi ng∆∞·ªùi nh∆∞ Mandenxtam mi√™u t·∫£.",
    sliderName: "Phong th√°i",
    src: "/assets/image/hcm-12.png",
  },
  {
    icon: <Home />,
    title: "üìö T∆∞ t∆∞·ªüng v∆∞·ª£t th·ªùi ƒë·∫°i",
    desc: "Nguy·ªÖn √Åi Qu·ªëc s·ªõm ti·∫øp thu v√† v·∫≠n d·ª•ng ch·ªß nghƒ©a M√°c ‚Äì L√™nin v√†o gi·∫£i ph√≥ng d√¢n t·ªôc, g·∫Øn gi·∫£i ph√≥ng d√¢n t·ªôc v·ªõi gi·∫£i ph√≥ng giai c·∫•p v√† con ng∆∞·ªùi, m·ªü ra con ƒë∆∞·ªùng m·ªõi cho c√°c d√¢n t·ªôc thu·ªôc ƒë·ªãa ‚Äî ƒëi·ªÅu n√†y th·ªÉ hi·ªán l√Ω t∆∞·ªüng ti·∫øn b·ªô mang t√≠nh to√†n c·∫ßu, bi·ªÉu hi·ªán c·ªßa m·ªôt n·ªÅn ‚ÄúvƒÉn h√≥a t∆∞∆°ng lai‚Äù.",
    sliderName: "T∆∞ t∆∞·ªüng",
    src: "/assets/image/hcm-11.jpg",
  },
  {
    icon: <Home />,
    title: "ü§ù T√¨nh h·ªØu √°i qu·ªëc t·∫ø",
    desc: "Nguy·ªÖn √Åi Qu·ªëc lu√¥n ƒë·ªÅ cao ƒëo√†n k·∫øt, h√≤a b√¨nh v√† c√¥ng l√Ω; ƒë·∫•u tranh kh√¥ng v√¨ tr·∫£ th√π m√† v√¨ m·ªôt th·∫ø gi·ªõi b√¨nh ƒë·∫≥ng, t·ª± do, gi√∫p ƒë·ª° c√°c d√¢n t·ªôc b·ªã √°p b·ª©c.",
    sliderName: "Qu·ªëc t·∫ø",
    src: "/assets/image/hcm-13.jpg",
  },
];

export default function ConclusionSection() {
  const isMobile = useMediaQuery("(min-width: 640px)");
  const [isVisible, setIsVisible] = useState(false);
  const [activeSlider, setActiveSlider] = useState(items[0].sliderName);
  const sectionRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          setIsVisible(true);
          setActiveSlider(items[0].sliderName);
        } else {
          setIsVisible(false);
        }
      },
      { threshold: 0.5 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
    };
  }, []);

  return (
    <>
      <div className="h-[75vh]">
        <LampContainer>
          <motion.h1
            initial={{ opacity: 0.5, y: 100 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{
              delay: 0.3,
              duration: 0.8,
              ease: "easeInOut",
            }}
            className="mt-8 bg-gradient-to-br from-slate-300 to-slate-500 py-4 bg-clip-text text-center text-2xl sm:text-3xl md:text-4xl lg:text-7xl font-medium tracking-tight text-transparent"
          >
            Nh·∫≠n x√©t
          </motion.h1>
          <div className="max-w-7xl mx-auto pt-10 px-4 md:px-8 lg:px-10 mb-16">
            <p className="text-neutral-700 dark:text-neutral-300 text-sm md:text-2xl pt-10">
              NƒÉm 1923, nh√† th∆°, nh√† b√°o n·ªïi ti·∫øng ng∆∞·ªùi X√¥ Vi·∫øt O.Mandenxtam g·∫∑p Nguy·ªÖn √Åi Qu·ªëc l√∫c n√†y 33 tu·ªïi ·ªü Moskva, O.Mandenxtam ƒë√£ ƒë√°nh gi√° Nguy·ªÖn √Åi Qu·ªëc l√† m·ªôt ng∆∞·ªùi ph∆∞∆°ng ƒê√¥ng l·ªãch s·ª±, l√† bi·ªÉu hi·ªán cho m·ªôt n·ªÅn vƒÉn h√≥a c·ªßa t∆∞∆°ng lai: ‚ÄúT·ª´ Nguy·ªÖn √Åi Qu·ªëc t·ªèa ra m·ªôt th·ª© vƒÉn h√≥a, kh√¥ng ph·∫£i vƒÉn h√≥a ch√¢u √Çu, m√† c√≥ l·∫Ω l√† m·ªôt n·ªÅn vƒÉn h√≥a c·ªßa t∆∞∆°ng lai. T·ª´ trong gi·ªçng n√≥i ƒë·∫ßm ·∫•m, thanh cao c·ªßa Ng∆∞·ªùi, ch√∫ng ta nh∆∞ nghe th·∫•y ng√†y mai, nh∆∞ th·∫•y vi·ªÖn c·∫£nh tr·ªùi y√™n bi·ªÉn l·∫∑ng c·ªßa t√¨nh h·ªØu √°i bao la to√†n th·∫ø gi·ªõi m√™nh mang nh∆∞ n∆∞·ªõc ƒë·∫°i d∆∞∆°ng‚Äù.
            </p>
          </div>
        </LampContainer>
      </div>
      <div
        ref={sectionRef}
        className="w-full h-full md:lg:pt-10 lg:pt-10 pt-14 bg-slate-950 overflow-hidden pb-10"
      >        
        <div>
          <ProgressSlider
            vertical={isMobile}
            fastDuration={300}
            duration={4000}
            activeSlider={activeSlider}
            className="flex flex-col md:flex-row h-full"
          >
            {/* Content Section */}          
            <SliderBtnGroup className="relative w-full md:w-1/2 z-10 flex flex-col h-[75vh] md:h-full bg-slate-950/95 backdrop-blur-md overflow-y-auto">
              {items.map((item, index) => (
                <SliderBtn
                  key={index}
                  value={item?.sliderName}
                  className="text-left p-4 md:p-6 border-b border-slate-800 flex-none h-[25%] md:h-1/4 relative group hover:bg-slate-900/50 transition-colors"
                  progressBarClass="left-0 top-0 bg-white w-1 md:w-2 h-full before:h-full before:w-2 md:before:w-3 before:bg-white"
                >
                  {/* Dark overlay for text contrast */}
                  <div className="absolute inset-0 bg-gradient-to-r from-slate-950/90 to-slate-950/50 pointer-events-none" />

                  <div className="relative z-10">
                    <h2 className="inline-block px-3 py-1.5 md:px-4 md:py-2 rounded bg-white text-black mb-3 md:mb-4 text-sm md:text-xl font-bold">
                      {item.title}
                    </h2>
                    <p className="text-sm md:text-base text-slate-200 line-clamp-3 md:line-clamp-none">
                      {item.desc}
                    </p>
                  </div>
                </SliderBtn>
              ))}
            </SliderBtnGroup>

            {/* Image Section */}
            <SliderContent className="hidden w-full md:w-3/6 lg:flex md:flex flex-col h-[40vh] md:h-[70vh] pe-5">
              {items.map((item, index) => (
                <SliderWrapper
                  className="h-full w-full"
                  key={index}
                  value={item?.sliderName}
                >
                  <div className="h-full w-full aspect-square rounded-lg overflow-hidden">
                    <Image
                      className="h-full w-full object-cover"
                      src={item?.src || "/placeholder.svg"}
                      width={500}
                      height={500}
                      alt={item.sliderName}
                      priority={index === 0}
                      sizes="(max-width: 768px) 100vw, 50vw"
                    />
                  </div>
                </SliderWrapper>
              ))}
            </SliderContent>
          </ProgressSlider>
        </div>

        {/* Mobile Navigation Indicator */}
        <div className="hidden md:hidden fixed bottom-4 left-1/2 -translate-x-1/2  gap-2 z-20">
          {items.map((item, index) => (
            <div
              key={index}
              className={`w-2 h-2 rounded-full transition-colors ${
                activeSlider === item.sliderName ? "bg-white" : "bg-white/30"
              }`}
            />
          ))}
        </div>
      </div>
    </>
  );
}
